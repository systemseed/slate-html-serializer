{"version":3,"file":"slate-html-serializer.js","sources":["../src/index.js"],"sourcesContent":["import React from 'react'\nimport { renderToStaticMarkup } from 'react-dom/server'\nimport typeOf from 'type-of'\nimport { Node, Value } from 'slate'\nimport { Record } from 'immutable'\n\n/**\n * String.\n *\n * @type {String}\n */\n\nconst String = new Record({\n  object: 'string',\n  text: '',\n})\n\n/**\n * A rule to (de)serialize text nodes. This is automatically added to the HTML\n * serializer so that users don't have to worry about text-level serialization.\n *\n * @type {Object}\n */\n\nconst TEXT_RULE = {\n  deserialize(el) {\n    if (el.tagName && el.tagName.toLowerCase() === 'br') {\n      return {\n        object: 'text',\n        leaves: [\n          {\n            object: 'leaf',\n            text: '\\n',\n          },\n        ],\n      }\n    }\n\n    if (el.nodeName == '#text') {\n      if (el.nodeValue && el.nodeValue.match(/<!--.*?-->/)) return\n\n      return {\n        object: 'text',\n        leaves: [\n          {\n            object: 'leaf',\n            text: el.nodeValue,\n          },\n        ],\n      }\n    }\n  },\n\n  serialize(obj, children) {\n    if (obj.object === 'string') {\n      return children.split('\\n').reduce((array, text, i) => {\n        if (i != 0) array.push(<br key={i} />)\n        array.push(text)\n        return array\n      }, [])\n    }\n  },\n}\n\n/**\n * A default `parseHtml` function that returns the `<body>` using `DOMParser`.\n *\n * @param {String} html\n * @return {Object}\n */\n\nfunction defaultParseHtml(html) {\n  if (typeof DOMParser === 'undefined') {\n    throw new Error(\n      'The native `DOMParser` global which the `Html` serializer uses by default is not present in this environment. You must supply the `options.parseHtml` function instead.'\n    )\n  }\n\n  const parsed = new DOMParser().parseFromString(html, 'text/html')\n  const { body } = parsed\n  return body\n}\n\n/**\n * HTML serializer.\n *\n * @type {Html}\n */\n\nclass Html {\n  /**\n   * Create a new serializer with `rules`.\n   *\n   * @param {Object} options\n   *   @property {Array} rules\n   *   @property {String|Object|Block} defaultBlock\n   *   @property {Function} parseHtml\n   */\n\n  constructor(options = {}) {\n    let {\n      defaultBlock = 'paragraph',\n      parseHtml = defaultParseHtml,\n      rules = [],\n    } = options\n\n    defaultBlock = Node.createProperties(defaultBlock)\n\n    this.rules = [...rules, TEXT_RULE]\n    this.defaultBlock = defaultBlock\n    this.parseHtml = parseHtml\n  }\n\n  /**\n   * Deserialize pasted HTML.\n   *\n   * @param {String} html\n   * @param {Object} options\n   *   @property {Boolean} toRaw\n   * @return {Value}\n   */\n\n  deserialize = (html, options = {}) => {\n    // Provides default value to make it working in IE 11.\n    html = html || '<p></p>'\n    const { toJSON = false } = options\n    const { defaultBlock, parseHtml } = this\n    const fragment = parseHtml(html)\n    const children = Array.from(fragment.childNodes)\n    let nodes = this.deserializeElements(children)\n\n    // COMPAT: ensure that all top-level inline nodes are wrapped into a block.\n    nodes = nodes.reduce((memo, node, i, original) => {\n      if (node.object == 'block') {\n        memo.push(node)\n        return memo\n      }\n\n      if (i > 0 && original[i - 1].object != 'block') {\n        const block = memo[memo.length - 1]\n        block.nodes.push(node)\n        return memo\n      }\n\n      const block = {\n        object: 'block',\n        data: {},\n        isVoid: false,\n        ...defaultBlock,\n        nodes: [node],\n      }\n\n      memo.push(block)\n      return memo\n    }, [])\n\n    // TODO: pretty sure this is no longer needed.\n    if (nodes.length == 0) {\n      nodes = [\n        {\n          object: 'block',\n          data: {},\n          isVoid: false,\n          ...defaultBlock,\n          nodes: [\n            {\n              object: 'text',\n              leaves: [\n                {\n                  object: 'leaf',\n                  text: '',\n                  marks: [],\n                },\n              ],\n            },\n          ],\n        },\n      ]\n    }\n\n    const json = {\n      object: 'value',\n      document: {\n        object: 'document',\n        data: {},\n        nodes,\n      },\n    }\n\n    const ret = toJSON ? json : Value.fromJSON(json)\n    return ret\n  }\n\n  /**\n   * Deserialize an array of DOM elements.\n   *\n   * @param {Array} elements\n   * @return {Array}\n   */\n\n  deserializeElements = (elements = []) => {\n    let nodes = []\n\n    elements.filter(this.cruftNewline).forEach(element => {\n      const node = this.deserializeElement(element)\n      switch (typeOf(node)) {\n        case 'array':\n          nodes = nodes.concat(node)\n          break\n        case 'object':\n          nodes.push(node)\n          break\n      }\n    })\n\n    return nodes\n  }\n\n  /**\n   * Deserialize a DOM element.\n   *\n   * @param {Object} element\n   * @return {Any}\n   */\n\n  deserializeElement = element => {\n    let node\n\n    if (!element.tagName) {\n      element.tagName = ''\n    }\n\n    const next = elements => {\n      if (Object.prototype.toString.call(elements) == '[object NodeList]') {\n        elements = Array.from(elements)\n      }\n\n      switch (typeOf(elements)) {\n        case 'array':\n          return this.deserializeElements(elements)\n        case 'object':\n          return this.deserializeElement(elements)\n        case 'null':\n        case 'undefined':\n          return\n        default:\n          throw new Error(\n            `The \\`next\\` argument was called with invalid children: \"${elements}\".`\n          )\n      }\n    }\n\n    for (const rule of this.rules) {\n      if (!rule.deserialize) continue\n      const ret = rule.deserialize(element, next)\n      const type = typeOf(ret)\n\n      if (\n        type != 'array' &&\n        type != 'object' &&\n        type != 'null' &&\n        type != 'undefined'\n      ) {\n        throw new Error(\n          `A rule returned an invalid deserialized representation: \"${node}\".`\n        )\n      }\n\n      if (ret === undefined) {\n        continue\n      } else if (ret === null) {\n        return null\n      } else if (ret.object == 'mark') {\n        node = this.deserializeMark(ret)\n      } else {\n        node = ret\n      }\n\n      break\n    }\n\n    return node || next(element.childNodes)\n  }\n\n  /**\n   * Deserialize a `mark` object.\n   *\n   * @param {Object} mark\n   * @return {Array}\n   */\n\n  deserializeMark = mark => {\n    const { type, data } = mark\n\n    const applyMark = node => {\n      if (node.object == 'mark') {\n        return this.deserializeMark(node)\n      } else if (node.object == 'text') {\n        node.leaves = node.leaves.map(leaf => {\n          leaf.marks = leaf.marks || []\n          leaf.marks.push({ type, data })\n          return leaf\n        })\n      } else {\n        node.nodes = node.nodes.map(applyMark)\n      }\n\n      return node\n    }\n\n    return mark.nodes.reduce((nodes, node) => {\n      const ret = applyMark(node)\n      if (Array.isArray(ret)) return nodes.concat(ret)\n      nodes.push(ret)\n      return nodes\n    }, [])\n  }\n\n  /**\n   * Serialize a `value` object into an HTML string.\n   *\n   * @param {Value} value\n   * @param {Object} options\n   *   @property {Boolean} render\n   * @return {String|Array}\n   */\n\n  serialize = (value, options = {}) => {\n    const { document } = value\n    const elements = document.nodes.map(this.serializeNode).filter(el => el)\n    if (options.render === false) return elements\n    const html = renderToStaticMarkup(<body>{elements.toArray()}</body>)\n    const inner = html.slice(6, -7)\n    return inner\n  }\n\n  /**\n   * Serialize a `node`.\n   *\n   * @param {Node} node\n   * @return {String}\n   */\n\n  serializeNode = node => {\n    if (node.object === 'text') {\n      const leaves = node.getLeaves()\n      const children = leaves.map(this.serializeLeaf);\n      return children.toArray()\n    }\n\n    const children = node.nodes.map(this.serializeNode)\n\n    for (const rule of this.rules) {\n      if (!rule.serialize) continue\n      const ret = rule.serialize(node, children.toArray())\n      if (ret === null) return\n      if (ret) return addKey(ret)\n    }\n\n    throw new Error(`No serializer defined for node of type \"${node.type}\".`)\n  }\n\n  /**\n   * Serialize a `leaf`.\n   *\n   * @param {Leaf} leaf\n   * @return {String}\n   */\n\n  serializeLeaf = leaf => {\n    const string = new String({ text: leaf.text })\n    const text = this.serializeString(string)\n\n    return leaf.marks.reduce((children, mark) => {\n      for (const rule of this.rules) {\n        if (!rule.serialize) continue\n        const ret = rule.serialize(mark, children)\n        if (ret === null) return\n        if (ret) return addKey(ret)\n      }\n\n      throw new Error(`No serializer defined for mark of type \"${mark.type}\".`)\n    }, text)\n  }\n\n  /**\n   * Serialize a `string`.\n   *\n   * @param {String} string\n   * @return {String}\n   */\n\n  serializeString = string => {\n    for (const rule of this.rules) {\n      if (!rule.serialize) continue\n      const ret = rule.serialize(string, string.text)\n      if (ret) return ret\n    }\n  }\n\n  /**\n   * Filter out cruft newline nodes inserted by the DOM parser.\n   *\n   * @param {Object} element\n   * @return {Boolean}\n   */\n\n  cruftNewline = element => {\n    return !(element.nodeName === '#text' && element.nodeValue == '\\n')\n  }\n}\n\n/**\n * Add a unique key to a React `element`.\n *\n * @param {Element} element\n * @return {Element}\n */\n\nlet key = 0\n\nfunction addKey(element) {\n  return React.cloneElement(element, { key: key++ })\n}\n\n/**\n * Export.\n *\n * @type {Html}\n */\n\nexport default Html\n"],"names":["String","Record","TEXT_RULE","el","tagName","toLowerCase","nodeName","nodeValue","match","obj","children","object","split","reduce","array","text","i","push","defaultParseHtml","html","DOMParser","Error","parsed","parseFromString","body","Html","options","defaultBlock","parseHtml","rules","Node","createProperties","deserialize","toJSON","fragment","Array","from","childNodes","nodes","deserializeElements","memo","node","original","block","length","json","ret","Value","fromJSON","elements","filter","cruftNewline","forEach","deserializeElement","element","typeOf","concat","next","Object","prototype","toString","call","rule","type","undefined","deserializeMark","mark","data","applyMark","leaves","map","marks","leaf","isArray","serialize","value","document","serializeNode","render","renderToStaticMarkup","toArray","inner","slice","getLeaves","serializeLeaf","addKey","string","serializeString","key","React","cloneElement"],"mappings":"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"}